package com.bs.malware_scanner_mobile_app.presentation.dashboard

import android.os.Build
import androidx.annotation.DrawableRes
import androidx.annotation.RequiresApi
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.Search
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.bs.malware_scanner_mobile_app.R
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.*
import java.time.LocalDateTime

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun DashboardScreen() {

    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        SearchSection()
        OverviewSection(
            listOf(
                Overview(
                    title = "Threat Activity",
                    subTitle = "Total Count",
                    amount = 778,
                    resId = R.drawable.ic_heart_beat,
                    variance = 1.2f
                ),
                Overview(
                    title = "User",
                    subTitle = "Distinct Count",
                    amount = 478,
                    resId = R.drawable.ic_user,
                    variance = 1.2f
                ),
                Overview(
                    title = "Cloud Activity",
                    subTitle = "Email Count",
                    amount = 9000,
                    resId = R.drawable.ic_cloud,
                    variance = 0f
                ),
                Overview(
                    title = "Infected",
                    subTitle = "System Count",
                    amount = 219,
                    resId = R.drawable.ic_infected,
                    variance = -5.1f
                ),
            )
        )
        RelatedConcernSection(
            listOf(
                "Virus Spike",
                "Malware",
                "Trojan",
                "Spam",
                "Ransomware"
            )
        )
        EventSection(
            listOf(
                Event(
                    amount = 23,
                    priority = "High",
                    title = "MailScanner - Virus",
                    subTitle = "Work/ Project A/Mail",
                    time = LocalDateTime.of(2022, 5, 22, 23, 0, 0)
                ),
                Event(
                    amount = 85,
                    priority = "High",
                    title = "Malware - Ransomware",
                    subTitle = "Game/ Project A/Mail",
                    time = LocalDateTime.of(2022, 8, 5, 10, 0, 0)
                )
            )
        )
    }
}

data class Event(
    val amount: Int,
    val priority: String,
    val title: String,
    val subTitle: String,
    val time: LocalDateTime
)

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun EventSection(events: List<Event>) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 15.dp, vertical = 10.dp),
    ) {
        Text(
            text = "Event",
            style = MaterialTheme.typography.h6,
            fontWeight = FontWeight.Bold,
            color = Color.DarkGray
        )
        Text(
            text = "See All",
            style = MaterialTheme.typography.body1,
            color = Color.Gray,
            fontWeight = FontWeight.SemiBold,
            modifier = Modifier
                .padding(end = 20.dp)
                .clickable {

                }
        )
    }
    LazyRow(
        modifier = Modifier.fillMaxWidth()
    ) {
        itemsIndexed(events) { idx, event ->
            EventItem(event, idx == events.size - 1)
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun EventItem(
    event: Event,
    last: Boolean
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 20.dp, end = if (last) 20.dp else 0.dp),
        shape = RoundedCornerShape(20.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(15.dp),
        ) {
            Row(
                modifier = Modifier
                    .width(180.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "${event.amount}",
                    style = MaterialTheme.typography.h6,
                    fontWeight = FontWeight.Bold
                )
                Box(
                    modifier = Modifier
                        .padding(horizontal = 8.dp, vertical = 2.dp)
                        .clip(RoundedCornerShape(20.dp))
                        .background(Purple200)
                ) {
                    Text(
                        text = event.priority,
                        color = Color.White,
                        fontSize = 12.sp,
                        modifier = Modifier
                            .padding(horizontal = 14.dp, vertical = 4.dp)
                    )
                }
            }
            Text(
                text = event.title,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color.DarkGray
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = event.subTitle,
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                color = Color.Gray
            )
            Spacer(modifier = Modifier.height(10.dp))
            Row(
                verticalAlignment = Alignment.CenterVertically,
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_time),
                    contentDescription = "time",
                    modifier = Modifier.size(16.dp),
                    tint = Color.Gray
                )
                Spacer(modifier = Modifier.width(6.dp))
                Text(
                    text = "${event.time.hour}.${event.time.minute}",
                    color = Color.Gray,
                    fontSize = 12.sp
                )
                Spacer(modifier = Modifier.width(10.dp))
                Icon(
                    painter = painterResource(id = R.drawable.ic_schedule),
                    contentDescription = "time",
                    modifier = Modifier.size(16.dp),
                    tint = Color.Gray
                )
                Spacer(modifier = Modifier.width(6.dp))
                Text(
                    text = "${event.time.dayOfMonth} ${event.time.month}",
                    color = Color.Gray,
                    fontSize = 12.sp
                )
            }
        }
    }
}

@Composable
fun RelatedConcernSection(concerns: List<String>) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 15.dp, vertical = 5.dp),
    ) {
        Text(
            text = "Related Concern",
            style = MaterialTheme.typography.h6,
            fontWeight = FontWeight.Bold,
            color = Color.DarkGray
        )
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                imageVector = Icons.Default.MoreVert,
                contentDescription = "more",
                modifier = Modifier.rotate(90f),
                tint = Color.DarkGray
            )
        }
    }
    LazyRow {
        itemsIndexed(concerns) { idx, concern ->
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier
                    .padding(start = 14.dp, end = if (idx == concerns.size - 1) 14.dp else 0.dp)
                    .clip(RoundedCornerShape(20.dp))
                    .background(LightPurple)
            ) {
                Text(
                    text = concern,
                    modifier = Modifier.padding(8.dp),
                    color = Purple200,
                    fontSize = 15.sp
                )
            }
        }
    }
}

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun OverviewSection(
    overviews: List<Overview>
) {
    Row(
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 15.dp)
    ) {
        Text(
            text = "Overview",
            style = MaterialTheme.typography.h6,
            fontWeight = FontWeight.Bold,
            color = Color.DarkGray
        )
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                imageVector = Icons.Default.MoreVert,
                contentDescription = "more",
                modifier = Modifier.rotate(90f),
                tint = Color.DarkGray
            )
        }
    }
    Box(
        modifier = Modifier
            .padding(horizontal = 10.dp)
    ) {
        LazyVerticalGrid(cells = GridCells.Fixed(2)) {
            items(overviews.size) { idx ->
                OverviewItem(overviews[idx])
            }
        }
    }
}

data class Overview(
    val title: String,
    val subTitle: String,
    @DrawableRes val resId: Int,
    val amount: Int,
    val variance: Float
)

@Composable
fun OverviewItem(overview: Overview) {
    Card(
        shape = RoundedCornerShape(15.dp),
        modifier = Modifier
            .border(width = 0.dp, color = Color.Transparent)
            .padding(8.dp),
        backgroundColor = Color.White
    ) {
        Column(
            modifier = Modifier
                .padding(start = 20.dp, top = 20.dp, end = 20.dp, bottom = 15.dp)
        ) {
            Row {
                Icon(
                    painter = painterResource(id = overview.resId),
                    contentDescription = overview.title,
                    modifier = Modifier.size(24.dp),
                    tint = Purple200
                )
                Spacer(modifier = Modifier.width(12.dp))
                Column {
                    Text(
                        text = overview.title,
                        fontWeight = FontWeight.Bold,
                        color = Color.DarkGray,
                        fontSize = 12.sp
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = overview.subTitle,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.LightGray,
                        fontSize = 10.sp
                    )
                }
            }
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = if (overview.amount >= 1000) {
                        "${overview.amount / 1000}K"
                    } else {
                        "${overview.amount}"
                    },
                    fontSize = 30.sp,
                    fontWeight = FontWeight.Bold
                )
                Column {
                    Icon(
                        imageVector = Icons.Default.ArrowForward,
                        contentDescription = "arrow",
                        tint = if (overview.variance > 0) {
                            Green
                        } else if (overview.variance < 0) {
                            Yellow
                        } else {
                            Blue
                        },
                        modifier = Modifier
                            .size(18.dp)
                            .rotate(
                                if (overview.variance > 0f) {
                                    360f - 45f
                                } else if (overview.variance < 0f) {
                                    45f
                                } else {
                                    0f
                                }
                            )
                    )
                    Text(
                        text = if (overview.variance > 0) "+${overview.variance} %" else "${overview.variance} %",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold,
                        color = if (overview.variance > 0) {
                            Green
                        } else if (overview.variance < 0) {
                            Yellow
                        } else {
                            Blue
                        },
                    )
                }
            }
        }
    }

}

@Composable
fun SearchSection() {
    var text by remember {
        mutableStateOf("")
    }
    OutlinedTextField(
        value = text,
        onValueChange = {
            text = it
        },
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp, vertical = 10.dp)
            .clip(RoundedCornerShape(30.dp))
            .background(VeryLightGray),
        placeholder = {
            Text(text = "Search something...")
        },
        colors = TextFieldDefaults.textFieldColors(
            textColor = Color.DarkGray,
            disabledTextColor = Color.White,
            backgroundColor = Color.Transparent,
            focusedIndicatorColor = Color.Transparent,
            unfocusedIndicatorColor = Color.Transparent,
            disabledIndicatorColor = Color.Transparent,
            cursorColor = Color.Black
        ),
        maxLines = 1,
        singleLine = true,
        trailingIcon = {
            IconButton(onClick = { /*TODO*/ }) {
                Icon(
                    imageVector = Icons.Default.Search,
                    contentDescription = "search"
                )
            }
        }
    )
}
