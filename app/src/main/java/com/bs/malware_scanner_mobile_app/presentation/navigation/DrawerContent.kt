package com.bs.malware_scanner_mobile_app.presentation

import androidx.annotation.DrawableRes
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Card
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavBackStackEntry
import androidx.navigation.NavHostController
import com.bs.malware_scanner_mobile_app.R
import com.bs.malware_scanner_mobile_app.core.util.titleString
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.LightPurple
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.Purple200

@Composable
fun DrawerContent(navBackStackEntry: NavBackStackEntry?, navController: NavHostController) {
    Column(
        modifier = Modifier
            .fillMaxSize(),
    ) {
        Box(
            modifier = Modifier.fillMaxWidth(),
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.Center)
            ) {
                Icon(
                    painter = painterResource(
                        id = R.drawable.shield
                    ),
                    contentDescription = "shield",
                    tint = Purple200,
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = titleString(),
                    fontSize = 22.sp,
                    fontWeight = FontWeight.Bold,
                    color = Purple200,
                )
            }
            IconButton(
                onClick = { /*TODO*/ },
                modifier = Modifier
                    .padding(end = 20.dp)
                    .align(Alignment.CenterEnd)
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.profile),
                    contentDescription = "profile",
                    modifier = Modifier
                        .size(28.dp)
                        .clip(CircleShape),
                    tint = Purple200
                )
            }
        }

        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 20.dp, vertical = 10.dp),
            backgroundColor = LightPurple,
            shape = RoundedCornerShape(20.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(20.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.scan),
                    contentDescription = "scan",
                    modifier = Modifier.size(40.dp)
                )
                Spacer(modifier = Modifier.width(10.dp))
                Column {
                    Text(
                        text = "Next Schedule Deep Scan",
                        color = Color.DarkGray,
                        fontWeight = FontWeight.Bold,
                        fontSize = 16.sp
                    )
                    Spacer(modifier = Modifier.height(10.dp))
                    Text(
                        text = "Tuesday 25 May  >",
                        color = Color.Gray,
                        fontWeight = FontWeight.SemiBold,
                        fontSize = 12.sp
                    )
                }
            }
        }
        Spacer(modifier = Modifier.height(10.dp))
        val currentDestination = navBackStackEntry?.destination
        DrawerItem(
            resId = R.drawable.dashboard,
            name = "Dashboard",
            selected = currentDestination?.route == Screen.DashboardScreen.route
        ) {
            navController.navigate(Screen.DashboardScreen.route)
        }
        DrawerItem(
            resId = R.drawable.analytics,
            name = "Analytics",
            selected = currentDestination?.route == Screen.AnalyticsScreen.route
        ) {
            navController.navigate(Screen.AnalyticsScreen.route)
        }
        DrawerItem(
            resId = R.drawable.scanning,
            name = "Scanning",
            selected = currentDestination?.route == Screen.ScanningScreen.route
        ) {
            navController.navigate(Screen.ScanningScreen.route)
        }
        DrawerItem(
            resId = R.drawable.report,
            name = "Report",
            selected = currentDestination?.route == Screen.ReportScreen.route
        ) {
            navController.navigate(Screen.ReportScreen.route)
        }
        DrawerItem(
            resId = R.drawable.quarantine,
            name = "Quarantine",
            selected = currentDestination?.route == Screen.QuarantineScreen.route
        ) {
            navController.navigate(Screen.QuarantineScreen.route)
        }
        DrawerItem(
            resId = R.drawable.settings,
            name = "Settings",
            selected = currentDestination?.route == Screen.SettingsScreen.route
        ) {
            navController.navigate(Screen.SettingsScreen.route)
        }
        DrawerItem(
            resId = R.drawable.terms_and_agreements,
            name = "Terms And Agreements",
            selected = currentDestination?.route == Screen.TermsAndAgreementsScreen.route
        ) {
            navController.navigate(Screen.TermsAndAgreementsScreen.route)
        }
        DrawerItem(
            resId = R.drawable.support,
            name = "Support",
            selected = currentDestination?.route == Screen.SupportScreen.route
        ) {
            navController.navigate(Screen.SupportScreen.route)
        }
    }
}

@Composable
fun DrawerItem(
    @DrawableRes resId: Int,
    name: String,
    selected: Boolean,
    onNavigate: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable {
                onNavigate()
            }
            .padding(vertical = 12.dp, horizontal = 30.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row {
            Icon(
                painter = painterResource(id = resId),
                contentDescription = "name",
                modifier = Modifier.size(24.dp),
                tint = if (selected) Purple200 else Color.Gray

            )
            Spacer(modifier = Modifier.width(10.dp))
            Text(
                text = name,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = if (selected) Purple200 else Color.Gray
            )
        }

        if (selected) {
            Box(
                modifier = Modifier
                    .padding(end = 20.dp)
                    .size(8.dp)
                    .clip(CircleShape)
                    .background(Purple200)
            )
        }
    }
}