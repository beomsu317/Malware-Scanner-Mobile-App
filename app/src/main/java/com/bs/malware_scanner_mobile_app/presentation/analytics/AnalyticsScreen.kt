package com.bs.malware_scanner_mobile_app.presentation.analytics

import android.graphics.Color.GRAY
import android.graphics.Color.parseColor
import android.graphics.Paint
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.bs.malware_scanner_mobile_app.R
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.*

@Composable
fun AnalyticsScreen() {
    LazyColumn(
        modifier = Modifier.fillMaxSize()
    ) {
        item { ScanningNeededSection() }
        item { MalwareDetectionSection() }
        item { MalwareType() }
    }
}

@Composable
fun MalwareType() {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 15.dp),
    ) {
        Text(
            text = "Malware Type",
            style = MaterialTheme.typography.h6,
            fontWeight = FontWeight.Bold,
            color = Color.DarkGray
        )
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                imageVector = Icons.Default.MoreVert,
                contentDescription = "more",
                modifier = Modifier
                    .rotate(90f),
                tint = Color.DarkGray
            )
        }
    }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(210.dp)
            .padding(horizontal = 10.dp)
            .padding(bottom = 10.dp),
        shape = RoundedCornerShape(10.dp),
        backgroundColor = Color.White,
        elevation = 2.dp
    ) {
        MalwareTypeGraph(
            modifier = Modifier
                .fillMaxWidth()
        )
    }
}

@Composable
fun MalwareTypeGraph(
    modifier: Modifier = Modifier
) {
    Canvas(modifier = modifier) {
        for (i in 1..7) {
            val path = Path().apply {
                moveTo(100f, size.height / 7 * i)
                lineTo(size.width - 50f, size.height / 7 * i)
            }
            drawPath(
                path = path,
                color = Color.LightGray,
                style = Stroke(width = 1.dp.toPx())
            )
        }

        drawContext.canvas.nativeCanvas.apply {
            var heightValues = listOf(0, 50, 100, 150, 200, 250)
            heightValues = heightValues.reversed()
            heightValues.forEachIndexed { index, value ->
                drawText(
                    value.toString(),
                    80f,
                    size.height / 7 * (index + 1) + 10f,
                    Paint().apply {
                        textSize = 30f
                        color = GRAY
                        textAlign = Paint.Align.RIGHT
                    }
                )
            }
            val types = listOf("Critical", "High", "Medium", "Low")
            types.forEachIndexed { index, type ->
                drawText(
                    type,
                    240f + (size.width / 4 - 50f) * (index),
                    size.height - 30f,
                    Paint().apply {
                        textSize = 30f
                        color = GRAY
                        textAlign = Paint.Align.CENTER
                    }
                )
            }
            val values = listOf(
                MalwareType(148, parseColor("#9159D9")),
                MalwareType(205, parseColor("#AF72D4")),
                MalwareType(225, parseColor("#ECADFA")),
                MalwareType(188, parseColor("#F0DAF2"))
            )
            values.forEachIndexed { index, type ->
                drawRoundRect(
                    210f + (size.width / 4 - 50f) * (index),
                    size.height - 30f - type.value * 1.8f,
                    210f + (size.width / 4 - 50f) * (index) + 60f,
                    size.height - 80f,
                    10f,
                    10f,
                    Paint().apply {
                        color = type.color
                        strokeCap = Paint.Cap.ROUND
                    }
                )
            }
        }
    }
}

data class MalwareType(val value: Int, val color: Int)

@Composable
fun MalwareDetectionSection() {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween,
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 15.dp),
    ) {
        Text(
            text = "Malware Detection",
            style = MaterialTheme.typography.h6,
            fontWeight = FontWeight.Bold,
            color = Color.DarkGray
        )
        IconButton(onClick = { /*TODO*/ }) {
            Icon(
                imageVector = Icons.Default.MoreVert,
                contentDescription = "more",
                modifier = Modifier
                    .rotate(90f),
                tint = Color.DarkGray
            )
        }
    }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 10.dp),
        shape = RoundedCornerShape(10.dp),
        backgroundColor = Color.White,
        elevation = 2.dp
    ) {
        Column {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 10.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(
                    modifier = Modifier
                        .weight(0.8f),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .clip(CircleShape)
                            .background(Blue)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "Malware Vulnerabilities",
                        fontSize = 12.sp,
                        color = Color.DarkGray
                    )
                    Spacer(modifier = Modifier.width(10.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .clip(CircleShape)
                            .background(Purple200)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "Malicious Activity",
                        fontSize = 12.sp,
                        color = Color.DarkGray
                    )
                }
                Row(
                    modifier = Modifier.weight(0.2f),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Week",
                            fontSize = 12.sp,
                            color = Color.DarkGray
                        )
                        Icon(
                            imageVector = Icons.Default.ArrowDropDown,
                            contentDescription = "arrow_dropdown",
                            tint = Color.DarkGray,
                            modifier = Modifier
                                .size(20.dp)
                                .clickable { }
                        )
                    }
                }
            }
            MalwareDetectionGraph()
        }
    }
}

@Composable
fun MalwareDetectionGraph(
    modifier: Modifier = Modifier
) {
    Canvas(
        modifier = modifier
            .fillMaxWidth()
            .height(200.dp)
    ) {
        val singleWidth = size.width / 5

        for (i in 1..4) {
            val path = Path().apply {
                moveTo(singleWidth * i, size.height / 12)
                lineTo(singleWidth * i, size.height - (size.height / 12))
            }
            drawPath(
                path = path,
                color = Color.LightGray,
                style = Stroke(width = 1.dp.toPx())
            )
        }

        drawContext.canvas.nativeCanvas.apply {
            val days = listOf("Mon 08", "Tue 09", "Wed 10", "Thu 11", "Fri 12")
            days.forEachIndexed { index, day ->
                drawText(
                    day,
                    singleWidth * index + 55f,
                    size.height - (size.height / 16),
                    Paint().apply {
                        textSize = 30f
                        color = GRAY
                    }
                )
            }
        }

        val malwareVulnPath = Path().apply {
            moveTo(50f, size.height / 2 - 50f)
            lineTo(size.width / 4, size.height / 2 - 100f)
            lineTo(size.width / 2, size.height / 2 + 10f)
            lineTo(size.width / 1.4f, size.height / 2 - 180f)
            lineTo(size.width - 50f, size.height / 2 - 30f)
        }

        drawPath(
            path = malwareVulnPath,
            color = Blue,
            style = Stroke(
                3.dp.toPx(),
                cap = StrokeCap.Round,
                pathEffect = PathEffect.cornerPathEffect(
                    radius = 200f
                )
            )
        )

        val maliciousActPath = Path().apply {
            moveTo(50f, size.height / 2 + 30f)
            lineTo(size.width / 4, size.height / 2 + 100f)
            lineTo(size.width / 2, size.height / 2 - 100f)
            lineTo(size.width / 1.4f, size.height / 2)
            lineTo(size.width - 50f, size.height / 2 - 200f)
        }
        drawPath(
            path = maliciousActPath,
            color = Purple200,
            style = Stroke(
                3.dp.toPx(),
                cap = StrokeCap.Round,
                pathEffect = PathEffect.cornerPathEffect(
                    radius = 200f
                )
            )
        )
    }
}

@Composable
fun ScanningNeededSection() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(20.dp),
        shape = RoundedCornerShape(20.dp),
        backgroundColor = DarkPurple,
        elevation = 1.dp
    ) {
        Row(
            modifier = Modifier.fillMaxWidth()
        ) {
            Box(
                contentAlignment = Alignment.Center
            ) {
                Box(
                    modifier = Modifier
                        .size(100.dp)
                        .clip(CircleShape)
                        .background(DeepDarkPurple)
                )
                Image(
                    painter = painterResource(id = R.drawable.cone),
                    contentDescription = "cone",
                    modifier = Modifier
                        .rotate(10f)
                        .padding(20.dp)
                        .size(100.dp)
                )
            }
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 20.dp, horizontal = 20.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "Summary Status",
                    color = Color.LightGray,
                    fontSize = 14.sp
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Scanning needed!",
                    color = Color.White,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.SemiBold
                )
                Spacer(modifier = Modifier.height(14.dp))
                OutlinedButton(
                    onClick = { /*TODO*/ },
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(30.dp)),
                    colors = ButtonDefaults.buttonColors(backgroundColor = Purple200),
                    contentPadding = PaddingValues()
                ) {
                    Text(
                        text = "Scan Now",
                        color = Color.White,
                        fontSize = 16.sp
                    )
                }
            }
        }
    }
}
