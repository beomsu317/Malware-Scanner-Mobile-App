package com.bs.malware_scanner_mobile_app.presentation

import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import com.bs.malware_scanner_mobile_app.presentation.topappbar.TopBar
import com.bs.malware_scanner_mobile_app.presentation.analytics.AnalyticsScreen
import com.bs.malware_scanner_mobile_app.presentation.dashboard.DashboardScreen
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.Background
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.MalwareScannerMobileAppTheme

class MainActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterialApi::class)
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareScannerMobileAppTheme {
                val navController = rememberNavController()
                val scaffoldState = rememberScaffoldState()
                val coroutineScope = rememberCoroutineScope()
                val navBackStackEntry by navController.currentBackStackEntryAsState()
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    backgroundColor = Background,
                    scaffoldState = scaffoldState,
                    topBar = {
                        TopBar(
                            coroutineScope = coroutineScope,
                            scaffoldState = scaffoldState,
                            navBackStackEntry = navBackStackEntry
                        )
                    },
                    drawerBackgroundColor = Background,
                    drawerContent = {
                        DrawerContent(
                            navBackStackEntry,
                            navController
                        )
                    },
                    drawerGesturesEnabled = true,
                ) { innerPadding ->
                    Box(
                        modifier = Modifier.padding(innerPadding)
                    ) {
                        NavHost(
                            navController = navController,
                            startDestination = Screen.AnalyticsScreen.route
                        ) {
                            composable(Screen.DashboardScreen.route) {
                                DashboardScreen()
                            }
                            composable(Screen.AnalyticsScreen.route) {
                                AnalyticsScreen()
                            }
                            composable(Screen.ScanningScreen.route) {
                            }
                            composable(Screen.ReportScreen.route) {
                            }
                            composable(Screen.QuarantineScreen.route) {
                            }
                            composable(Screen.SettingsScreen.route) {
                            }
                            composable(Screen.TermsAndAgreementsScreen.route) {
                            }
                            composable(Screen.SupportScreen.route) {
                            }

                        }
                    }
                }
            }
        }
    }
}
