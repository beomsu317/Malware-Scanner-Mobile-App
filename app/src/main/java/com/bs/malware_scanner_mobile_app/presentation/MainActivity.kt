package com.bs.malware_scanner_mobile_app.presentation

import android.graphics.PorterDuff
import android.graphics.PorterDuffXfermode
import android.graphics.Typeface
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.annotation.RequiresApi
import androidx.annotation.Size
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Menu
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Alignment.Companion.Center
import androidx.compose.ui.Alignment.Companion.CenterEnd
import androidx.compose.ui.Alignment.Companion.CenterHorizontally
import androidx.compose.ui.Alignment.Companion.CenterVertically
import androidx.compose.ui.Alignment.Companion.End
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Rect
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.drawscope.drawIntoCanvas
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.*
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.bs.malware_scanner_mobile_app.R
import com.bs.malware_scanner_mobile_app.presentation.analytics.AnalyticsScreen
import com.bs.malware_scanner_mobile_app.presentation.dashboard.DashboardScreen
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.Background
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.LightPurple
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.MalwareScannerMobileAppTheme
import com.bs.malware_scanner_mobile_app.presentation.ui.theme.Purple200
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MalwareScannerMobileAppTheme {
                val scaffoldState = rememberScaffoldState()
                val coroutineScope = rememberCoroutineScope()
                Scaffold(
                    modifier = Modifier.fillMaxSize(),
                    backgroundColor = Background,
                    scaffoldState = scaffoldState,
                    topBar = {
                        TopAppBar(
                            backgroundColor = Background,
                            modifier = Modifier.fillMaxWidth(),
                            elevation = 0.dp
                        ) {
                            Box(
                                modifier = Modifier
                                    .fillMaxWidth()
                            ) {
                                IconButton(onClick = {
                                    coroutineScope.launch {
                                        scaffoldState.drawerState.open()
                                    }
                                }) {
                                    Icon(
                                        imageVector = Icons.Filled.Menu,
                                        contentDescription = "menu",
                                        tint = Color.DarkGray
                                    )
                                }
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .align(Alignment.Center),
                                    verticalAlignment = CenterVertically,
                                    horizontalArrangement = Arrangement.Center,
                                ) {
                                    Icon(
                                        painter = painterResource(
                                            id = R.drawable.ic_shield
                                        ),
                                        contentDescription = "shield",
                                        tint = Purple200,
                                        modifier = Modifier.size(24.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text(
                                        text = buildAnnotatedString {
                                            append("N")
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.9f)
                                                )
                                            )
                                            append("j")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.8f)
                                                )
                                            )
                                            append("a")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.7f)
                                                )
                                            )
                                            append("g")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.6f)
                                                )
                                            )
                                            append("a")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.5f)
                                                )
                                            )
                                            append("n")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.4f)
                                                )
                                            )
                                            append("i")
                                            pop()
                                        },
                                        fontSize = 22.sp,
                                        fontWeight = FontWeight.Bold,
                                        color = Purple200,
                                    )
                                }
                            }
                        }
                    },
                    drawerBackgroundColor = Background,
                    drawerContent = {
                        Column(
                            modifier = Modifier
                                .fillMaxSize(),
                        ) {
                            Box(
                                modifier = Modifier.fillMaxWidth(),
                            ) {
                                Row(
                                    verticalAlignment = Alignment.CenterVertically,
                                    horizontalArrangement = Arrangement.Center,
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .align(Center)
                                ) {
                                    Icon(
                                        painter = painterResource(
                                            id = R.drawable.ic_shield
                                        ),
                                        contentDescription = "shield",
                                        tint = Purple200,
                                        modifier = Modifier.size(24.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text(
                                        text = buildAnnotatedString {
                                            append("N")
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.9f)
                                                )
                                            )
                                            append("j")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.8f)
                                                )
                                            )
                                            append("a")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.7f)
                                                )
                                            )
                                            append("g")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.6f)
                                                )
                                            )
                                            append("a")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.5f)
                                                )
                                            )
                                            append("n")
                                            pop()
                                            pushStyle(
                                                SpanStyle(
                                                    color = Purple200.copy(alpha = 0.4f)
                                                )
                                            )
                                            append("i")
                                            pop()
                                        },
                                        fontSize = 22.sp,
                                        fontWeight = FontWeight.Bold,
                                        color = Purple200,
                                    )
                                }
                                IconButton(
                                    onClick = { /*TODO*/ },
                                    modifier = Modifier
                                        .padding(end = 20.dp)
                                        .align(CenterEnd)
                                ) {
                                    Icon(
                                        painter = painterResource(id = R.drawable.ic_profile),
                                        contentDescription = "profile",
                                        modifier = Modifier
                                            .size(28.dp)
                                            .clip(CircleShape),
                                        tint = Purple200
                                    )
                                }
                            }

                            Card(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(horizontal = 20.dp, vertical = 10.dp),
                                backgroundColor = LightPurple,
                                shape = RoundedCornerShape(20.dp)
                            ) {
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(20.dp),
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Image(
                                        painter = painterResource(id = R.drawable.ic_scan),
                                        contentDescription = "scan",
                                        modifier = Modifier.size(40.dp)
                                    )
                                    Spacer(modifier = Modifier.width(10.dp))
                                    Column {
                                        Text(
                                            text = "Next Schedule Deep Scan",
                                            color = Color.DarkGray,
                                            fontWeight = FontWeight.Bold,
                                            fontSize = 16.sp
                                        )
                                        Spacer(modifier = Modifier.height(10.dp))
                                        Text(
                                            text = "Tuesday 25 May  >",
                                            color = Color.Gray,
                                            fontWeight = FontWeight.SemiBold,
                                            fontSize = 12.sp
                                        )
                                    }
                                }
                            }
                        }
                    },
                    drawerGesturesEnabled = true,
                ) { innerPadding ->
                    Box(
                        modifier = Modifier.padding(innerPadding)
                    ) {
                        val navController = rememberNavController()
                        NavHost(
                            navController = navController,
                            startDestination = Screen.DashboardScreen.route
                        ) {
                            composable(Screen.DashboardScreen.route) {
                                DashboardScreen()
                            }
                            composable(Screen.AnalyticsScreen.route) {
                                AnalyticsScreen()
                            }
                        }
                    }
                }
            }
        }
    }
}
